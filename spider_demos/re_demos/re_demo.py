import re


if __name__ == '__main__':
    print(re.search(r'wuyifan', 'hello wuyifan'))
    # . 匹配所有字符（除\之外的所有字符）
    # \d 匹配数字
    # []创建字符类，匹配字符类中的任何一个字符就算匹配上了， - 表示一个范围
    print(re.search(r'[a-z]', '1h'))
    # {}里边带一个数字，表示前边一个字符出现的次数 {3, 10} 表示出现3-10次
    # 匹配 0-255之间的数字
    print(re.search(r'(\d)|(\d\d)|([01]\d\d|2[0-4]\d|25[0-4])', '20'))

    print(re.search(r'[01]\d\d?|2[0-4]\d?|25[0-4]', '192'))

    # 匹配ip地址
    print(re.search(r'(([01]?\d?\d|2[0-4]\d|25[0-4])\.){3}([01]?\d?\d|2[0-4]\d|25[0-4])', '192.168.1.1'))

    # | 或+  A|B 匹配A 或者 B

    # ^ 需要确定匹配字符串的位置是开始位置
    print(re.search(r'^\d', 'b192'))  # None
    print(re.search(r'\d', '192'))  # 1

    # $ 匹配字符串的结束位置，跟 ^ 相反

    # \ 1.将一个普通字符转变成特殊字符，例如 \d 表示匹配所有十进制数字
    #   2.解除元字符的特殊功能，例如\.表示匹配点号本身
    #   3.引用序号对应子组所匹配的字符串

    # \A 表示字符串开始位置，与 ^ 很像
    # \Z 表示字符串开始位置，与 $ 很像

    # * 表示0次或者多次
    # + 表示一次或者多次
    # ? 表示0次或者1次

    # \b 表示单词边界
    # \B 表示非单词边界
    # \d 表示数字
    # \D 表示非数字

    # \s 表示空白字符 （\t \n \r \f \v \n\r）
    # \S 表示所有的非空白字符
    # \w 单词字符 也包括数字和下划线
    # \W 非单词字符

    # 编译正则表达式
    # 如果需要重复使用正则表达式，可以编译成一个对象
    p = re.compile(r'[A-Z]')
    print(p.findall("Wuyifan"))
